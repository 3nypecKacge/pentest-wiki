#!/usr/bin/env python2
#src: http://joakim.uddholm.com/posts/md5-length-extension-attack.html
# https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks

from hashlib import md5
from hashpumpy import hashpump

def hexdump(s):
        for b in xrange(0, len(s), 16):
                lin = [c for c in s[b : b + 16]]
                #~ if sum([ord(l) for l in lin]) == 0:
                        #~ continue
                hxdat = ' '.join('%02X' % ord(c) for c in lin)
                pdat = ''.join((c if 32 <= ord(c) <= 126 else '.' )for c in lin)
                print('  %04x: %-48s %s' % (b, hxdat, pdat))
        print

SECRET = "secret"

def get_md5(msg):
    plain = SECRET + msg
    #print("doing an md5 of %s" % plain)
    plain = plain.encode()
    return md5(plain).hexdigest()

msg_from_server = "data"
hash_from_server = get_md5( msg_from_server)
print("Server: I give you a message and the MAC md5(secret+'%s').\ndata: %s\nMAC: %s\n" % (msg_from_server, msg_from_server, hash_from_server))

this_I_want_to_add = "append"
msg_to_forge = msg_from_server + this_I_want_to_add
forged_hash, forged_msg = hashpump(hash_from_server, msg_from_server, this_I_want_to_add, len(SECRET))
print("Client: I give you a message and I can spoof the MAC.\nmy data: %s\nspofed MAC: %s" % (msg_to_forge, forged_hash))
print("what I send as data")
hexdump(forged_msg)

msg_server_check = SECRET + str(forged_msg)
hash_server_calculats_with_secret = md5(msg_server_check).hexdigest()
print("Server: I received your message. I try to check you MAC md5(SECRET+yourdata). Result:\n%s" % hash_server_calculats_with_secret)
